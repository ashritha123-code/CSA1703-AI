print("192372200-P.Ashritha")
class Node:
    def __init__(self, position, parent=None):
        self.position = position  # (x, y) coordinates
        self.parent = parent      # Parent node
        self.g = 0                # Cost from start to this node
        self.h = 0                # Heuristic cost to goal
        self.f = 0                # Total cost (g + h)

    def __eq__(self, other):
        return self.position == other.position


def astar(start, goal, grid):
    open_list = []  # Nodes to be evaluated
    closed_list = []  # Nodes already evaluated

    start_node = Node(start)
    goal_node = Node(goal)

    open_list.append(start_node)

    while open_list:
        # Get the current node
        current_node = min(open_list, key=lambda o: o.f)

        # If we reached the goal, reconstruct the path
        if current_node == goal_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        # Move current node from open to closed
        open_list.remove(current_node)
        closed_list.append(current_node)

        # Generate children nodes
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0)]:  # Adjacent squares (up, down, left, right)
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])

            # Check if the new position is within the grid bounds
            if (node_position[0] > (len(grid) - 1) or node_position[0] < 0 or
                node_position[1] > (len(grid[len(grid) - 1]) - 1) or node_position[1] < 0):
                continue

            # Check if the node is walkable (not an obstacle)
            if grid[node_position[0]][node_position[1]] != 0:
                continue

            # Create a new node
            new_node = Node(node_position, current_node)

            # If the node is in the closed list, skip it
            if new_node in closed_list:
                continue

            # Calculate g, h, and f values
            new_node.g = current_node.g + 1  # Assuming cost to move to adjacent node is 1
            new_node.h = ((new_node.position[0] - goal_node.position[0]) ** 2) + ((new_node.position[1] - goal_node.position[1]) ** 2)
            new_node.f = new_node.g + new_node.h

            # If the node is already in the open list with a higher f value, skip it
            if add_to_open(open_list, new_node):
                open_list.append(new_node)

    return None  # Return None if there is no path


def add_to_open(open_list, neighbor):
    for node in open_list:
        if neighbor == node and neighbor.g > node.g:
            return False
    return True


if __name__ == "__main__":
    # Define a grid (0 = walkable, 1 = obstacle)
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0]
    ]

    start = (0, 0)  # Starting position
    goal = (4, 4)   # Goal position

    path = astar(start, goal, grid)
    print("Path from start to goal:", path)

