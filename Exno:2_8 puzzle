print("192372200-P.Ashritha")
import heapq

class PuzzleState:
    def __init__(self, board, empty_tile_pos, moves=0, previous=None):
        self.board = board
        self.empty_tile_pos = empty_tile_pos
        self.moves = moves
        self.previous = previous

    def is_goal(self):
        return self.board == [1, 2, 3, 4, 5, 6, 7, 8, 0]

    def get_possible_moves(self):
        x, y = self.empty_tile_pos
        moves = []
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

        for dx, dy in directions:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < 3 and 0 <= new_y < 3:
                moves.append((new_x, new_y))
        return moves

    def move(self, new_empty_tile_pos):
        new_board = self.board.copy()
        x, y = self.empty_tile_pos
        new_x, new_y = new_empty_tile_pos
        new_board[x * 3 + y], new_board[new_x * 3 + new_y] = new_board[new_x * 3 + new_y], new_board[x * 3 + y]
        return PuzzleState(new_board, new_empty_tile_pos, self.moves + 1, self)

    def heuristic(self):
        return sum(abs((val - 1) // 3 - i // 3) + abs((val - 1) % 3 - i % 3) for i, val in enumerate(self.board) if val)

    def __lt__(self, other):
        return (self.moves + self.heuristic()) < (other.moves + other.heuristic())

def a_star_search(initial_state):
    open_set = []
    heapq.heappush(open_set, initial_state)
    closed_set = set()

    while open_set:
        current_state = heapq.heappop(open_set)

        # Print the current state of the board
        print("Current Board State:")
        print_board(current_state.board)
        print(f"Moves so far: {current_state.moves}\n")

        if current_state.is_goal():
            return current_state

        closed_set.add(tuple(current_state.board))

        for new_empty_tile_pos in current_state.get_possible_moves():
            new_state = current_state.move(new_empty_tile_pos)

            if tuple(new_state.board) not in closed_set:
                heapq.heappush(open_set, new_state)

    return None

def print_board(board):
    for i in range(3):
        print(board[i*3:(i+1)*3])
    print()

def print_solution(solution):
    path = []
    while solution:
        path.append(solution.board)
        solution = solution.previous
    for step in reversed(path):
        print_board(step)

if __name__ == "__main__":
    initial_board = [1, 2, 3, 4, 5, 6, 0, 7, 8]  # Example initial state
    empty_tile_pos = initial_board.index(0)
    initial_state = PuzzleState(initial_board, (empty_tile_pos // 3, empty_tile_pos % 3))

    print("Initial Board State:")
    print_board(initial_board)
    print("Starting A* Search...\n")

    solution = a_star_search(initial_state)

    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")
