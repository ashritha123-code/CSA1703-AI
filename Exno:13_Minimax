import math
import time

# Constants for players
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

def is_winner(board, player):
    for i in range(3):
        if all(cell == player for cell in board[i]):  # Rows
            return True
        if all(board[j][i] == player for j in range(3)):  # Columns
            return True
    if all(board[i][i] == player for i in range(3)):  # Diagonal
        return True
    if all(board[i][2 - i] == player for i in range(3)):  # Anti-diagonal
        return True
    return False

def is_draw(board):
    return all(cell != EMPTY for row in board for cell in row)

def minimax(board, depth, is_maximizing):
    if is_winner(board, PLAYER_X):
        return -1
    if is_winner(board, PLAYER_O):
        return 1
    if is_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    score = minimax(board, depth + 1, False)
                    board[i][j] = EMPTY
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    score = minimax(board, depth + 1, True)
                    board[i][j] = EMPTY
                    best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_O
                score = minimax(board, 0, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def print_board(board):
    print("\nCurrent board:")
    for i, row in enumerate(board):
        print(" " + " | ".join(row) + " ")
        if i < 2:
            print("---+---+---")
    print()

if __name__ == "__main__":
    board = [[EMPTY]*3 for _ in range(3)]

    print("Welcome to Tic Tac Toe!")
    print_board(board)

    while True:
        # Player X's turn (human)
        while True:
            try:
                row = int(input("Player X, enter your row (0-2): "))
                col = int(input("Player X, enter your column (0-2): "))
                if row not in range(3) or col not in range(3):
                    print("Row and column must be between 0 and 2. Try again.")
                    continue
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_X
                    break
                else:
                    print("That cell is already occupied. Try again.")
            except ValueError:
                print("Invalid input. Please enter valid integers.")

        print_board(board)
        if is_winner(board, PLAYER_X):
            print("Player X wins! Congratulations!")
            break
        if is_draw(board):
            print("It's a draw!")
            break

        # Player O's turn (AI)
        print("Player O (AI) is making a move...")
        time.sleep(1)  # Pause to show AI thinking
        move = best_move(board)
        if move != (-1, -1):
            board[move[0]][move[1]] = PLAYER_O
            print(f"Player O placed on row {move[0]}, column {move[1]}.")

        print_board(board)
        if is_winner(board, PLAYER_O):
            print("Player O (AI) wins! Better luck next time!")
            break
        if is_draw(board):
            print("It's a draw!")
            break
